
import argparse
import datetime
import csv
import fnmatch
import scheduler_util
import os
import sys

sys.path.append('data')
import app_data_mobilenets as app_data

sys.path.append('src/scheduler')
import run_scheduler as sched
import run_scheduler_simulator as sim

sys.path.append('src/scheduler/types')
import Scheduler
import Setup

def get_args(simulator=True):
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--outdir", required=True)
    parser.add_argument("-r", "--run_id", required=True)
    parser.add_argument("-b", "--budget", type=int, required=True)
    parser.add_argument("-v", "--verbose", type=int, default=0)
    parser.add_argument("-f", "--setups_file")
    parser.add_argument("-m", "--metric", default="f1")
    parser.add_argument("-s", "--simulator", type=int, default=0)
    parser.add_argument("-t", "--scheduler_type", default="greedy")
    parser.add_argument("--mode", default="mainstream", help="mainstream, nosharing or maxsharing")
    return parser.parse_args()

def get_eval(entry_id, s, stats, budget, latency_us):
    row = [
        entry_id,
        round(stats["metric"], 6),
    ]
    row += stats["frozen"]
    row += stats["fps"]
    row += [budget]
    row += [latency_us]
    return row

def run_scheduler(metric, setup, setup_suffix, budget, scheduler_type, mode, is_simulator):

    apps = [app.to_map() for app in setup.apps]

    s = Scheduler.Scheduler(metric,
                            apps,
                            setup.video_desc.to_map(),
                            app_data.model_desc,
                            0,
                            scheduler=scheduler_type)

    # Run mainstream
    start = datetime.datetime.now()
    if (is_simulator):
        print "Running " + scheduler_type + " simulator."

        s, stats = sim.run_simulator(metric,
                                     apps,
                                     setup.video_desc.to_map(),
                                     budget=budget,
                                     mode=mode,
                                     scheduler=scheduler_type)
    else:
        print "Running " + scheduler_type + " with streamer."

        s, stats = sched.run(metric,
                             apps,
                             app_data.video_desc,
                             mode,
                             budget=budget)

    end = datetime.datetime.now()
    diff = end - start

    row = get_eval(len(apps), s, stats, budget, diff.microseconds)

    return row

def main():
    args = get_args()

    setup_generator = Setup.SetupGenerator()
    setups = setup_generator.deserialize_setups(args.setups_file + ".pickle")

    # Write out each schedule generated by scheduler
    subdir = os.path.join(args.outdir, "schedules");
    if not os.path.exists(subdir):
        os.makedirs(subdir)

    if args.simulator:
        run_mode = "sim."
    else:
        run_mode = ""

    filename = "{}.{}.{}.{}.{}".format(args.scheduler_type,
                                       args.mode,
                                       run_mode,
                                       args.budget,
                                       args.run_id)

    outfile  = os.path.join(subdir, filename)
    f = open(outfile, 'w+')

    for setup in setups:

      # Get schedules generated by scheduler
      writer = csv.writer(f)

      row = run_scheduler(args.metric,
                          setup,
                          setup.uuid,
                          args.budget,
                          args.scheduler_type,
                          args.mode,
                          args.simulator)

      writer.writerow(row)
      f.flush()

    f.close()

if __name__ == "__main__":
    main()
