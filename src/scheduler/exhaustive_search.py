

import argparse
import csv
import fnmatch
import scheduler_util
import os
import sys
import app_data_mobilenets as app_data

sys.path.append('src/scheduler')
import run_scheduler_simulator as sim

sys.path.append('src/scheduler/types')
import Scheduler
import Setup

# TODO subdir everything into run_id?

# Directory structure
# outdir/
#   pointers.run_id.v0
#   setups.run_id.v0
#   setups.run_id.v0.pickle
#   setup/
#       configuration.setup_suffix.v0
#       model.setup_suffix.v0
#       environment.setup_suffix.v0
#   schedules/
#       greedy.run_id.v0
#       exhaustive.run_id.v0

def get_args(simulator=True):
    parser = argparse.ArgumentParser()
    app_names = [app["name"] for app in app_data.app_options]
    parser.add_argument("-n", "--num_apps_range", required=True, type=int)
    parser.add_argument("-o", "--outdir", required=True)
    parser.add_argument("-r", "--run_id", required=True)
    parser.add_argument("-v", "--verbose", type=int, default=0)
    parser.add_argument("-m", "--metric", default="f1")
    parser.add_argument("-t", "--scheduler_type", default="greedy")
    parser.add_argument("-s", "--setups_file")
    return parser.parse_args()


def get_eval(entry_id, s, stats, budget):
    row = [
        entry_id,
        stats["metric"],
    ]
    row += stats["frozen"]
    row += stats["fps"]
    row += [budget]
    return row


def write_cost_benefits_file(cost_benefits, outdir, filename):
    subdir = os.path.join(outdir, "setup");
    if not os.path.exists(subdir):
        os.makedirs(subdir)

    outfile = os.path.join(subdir, "configuration." + filename)
    with open(outfile, "w+") as f:
        for app_id, d1 in cost_benefits.iteritems():
            for num_frozen, d2 in d1.iteritems():
                for target_fps, d3 in d2.iteritems():
                    cost = d3[0]
                    benefit = d3[1]
                    line = "{} {} {} {} {}\n".format(app_id,
                                                     num_frozen,
                                                     target_fps,
                                                     cost,
                                                     benefit)
                    f.write(line)
    return outfile


def write_model_file(layer_costs, outdir, filename):
    subdir = os.path.join(outdir, "setup");
    if not os.path.exists(subdir):
        os.makedirs(subdir)

    outfile = os.path.join(subdir, "model." + filename)
    with open(outfile, "w+") as f:
        layer_costs_str = [str(c) for c in layer_costs]
        line = " ".join(layer_costs_str) + "\n"
        f.write(line)
    return outfile


def write_environment_file(budget, outdir, filename):
    subdir = os.path.join(outdir, "setup");
    if not os.path.exists(subdir):
        os.makedirs(subdir)

    outfile = os.path.join(subdir, "environment." + filename)
    with open(outfile, "w+") as f:
        line = str(budget) + "\n"
        f.write(line)
    return outfile

def write_intermediate_files(args, setup, setup_suffix):

    apps = [app.to_map() for app in setup.apps]
    budget = setup.budget

    s = Scheduler.Scheduler(args.metric,
                            apps,
                            setup.video_desc.to_map(),
                            app_data.model_desc,
                            0)

    # Write cost benefits, model, and environment data for cpp fn
    cost_benefits = s.get_cost_benefits()
    f1 = write_cost_benefits_file(cost_benefits, args.outdir, setup_suffix)
    f2 = write_model_file(s.model.layer_latencies, args.outdir, setup_suffix)
    f3 = write_environment_file(budget, args.outdir, setup_suffix)

    return


def run_scheduler(args, setup, setup_suffix, scheduler_type):

    apps = [app.to_map() for app in setup.apps]
    budget = setup.budget

    s = Scheduler.Scheduler(args.metric,
                            apps,
                            setup.video_desc.to_map(),
                            app_data.model_desc,
                            0,
                            scheduler=scheduler_type)

    # Get output with mainstream-simulator schedules
    s, stats = sim.run_simulator(args.metric, apps, budget, scheduler=scheduler_type)
    row = get_eval(len(apps), s, stats, budget)

    return row


def main():
    args = get_args()

    setup_generator = Setup.SetupGenerator()
    setups = setup_generator.deserialize_setups(args.setups_file + ".pickle")

    # Write out each schedule generated by scheduler
    subdir = os.path.join(args.outdir, "schedules");
    if not os.path.exists(subdir):
        os.makedirs(subdir)

    rows = []
    greedy_file = os.path.join(subdir, "greedy." + args.run_id)
    greedy_f = open(greedy_file, 'w+')
    dp_file = os.path.join(subdir, "dp." + args.run_id)
    dp_f = open(dp_file, 'w+')
    pointers_file = os.path.join(args.outdir, "pointers." + args.run_id)
    pointers_f = open(pointers_file, "w+")

    for setup in setups:

      # Write out filenames which point to schedule data
      setup_suffix = setup.uuid
      line = "{}\n".format(setup_suffix)
      pointers_f.write(line)
      pointers_f.flush()

      # Write out intermediate files
      write_intermediate_files(args, setup, setup_suffix)

      # TODO: Split here!

      # Get schedules generated by scheduler
      if args.scheduler_type == "greedy":
          writer = csv.writer(greedy_f)
      elif args.scheduler_type == "hifi":
          writer = csv.writer(dp_f)
      else:
          print args.scheduler_type, "must be in {greedy, hifi}"

      row = run_scheduler(args, setup, setup_suffix, args.scheduler_type)
      writer.writerow(row)

    greedy_f.close()
    dp_f.close()
    pointers_f.close()


if __name__ == "__main__":
    main()
