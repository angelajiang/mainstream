
import argparse
import datetime
import csv
import fnmatch
import scheduler_util
import os
import sys
import app_data_mobilenets as app_data

sys.path.append('src/scheduler')
import run_scheduler_simulator as sim

sys.path.append('src/scheduler/types')
import Scheduler
import Setup

# TODO subdir everything into run_id?

# Directory structure
# outdir/
#   pointers.run_id.v0
#   setups.run_id.v0
#   setups.run_id.v0.pickle
#   setup/
#       configuration.setup_suffix.v0
#       model.setup_suffix.v0
#       environment.setup_suffix.v0
#   schedules/
#       greedy.run_id.v0
#       exhaustive.run_id.v0

def get_args(simulator=True):
    parser = argparse.ArgumentParser()
    app_names = [app["name"] for app in app_data.app_options]
    parser.add_argument("-n", "--num_apps_range", required=True, type=int)
    parser.add_argument("-o", "--outdir", required=True)
    parser.add_argument("-r", "--run_id", required=True)
    parser.add_argument("-v", "--verbose", type=int, default=0)
    parser.add_argument("-m", "--metric", default="f1")
    parser.add_argument("-t", "--scheduler_type", default="greedy")
    parser.add_argument("-s", "--setups_file")
    return parser.parse_args()


def get_eval(entry_id, s, stats, budget, latency_us):
    row = [
        entry_id,
        stats["metric"],
    ]
    row += stats["frozen"]
    row += stats["fps"]
    row += [budget]
    row += [latency_us]
    return row


def run_scheduler(args, setup, setup_suffix, scheduler_type):

    apps = [app.to_map() for app in setup.apps]

    budget = setup.budget

    s = Scheduler.Scheduler(args.metric,
                            apps,
                            setup.video_desc.to_map(),
                            app_data.model_desc,
                            0,
                            scheduler=scheduler_type)

    # Get output with mainstream-simulator schedules
    start = datetime.datetime.now()
    s, stats = sim.run_simulator(args.metric,
                                 apps,
                                 setup.video_desc.to_map(),
                                 budget,
                                 scheduler=scheduler_type)
    end = datetime.datetime.now()
    diff = end - start

    row = get_eval(len(apps), s, stats, budget, diff.microseconds)

    return row


def main():
    args = get_args()

    setup_generator = Setup.SetupGenerator()
    setups = setup_generator.deserialize_setups(args.setups_file + ".pickle")

    # Write out each schedule generated by scheduler
    subdir = os.path.join(args.outdir, "schedules");
    if not os.path.exists(subdir):
        os.makedirs(subdir)

    rows = []

    if args.scheduler_type == "greedy":
        outfile  = os.path.join(subdir, "greedy." + args.run_id)
    elif args.scheduler_type == "hifi":
        outfile = os.path.join(subdir, "hifi." + args.run_id)
    else:
        print args.scheduler_type, "must be in {greedy, hifi}"
        sys.exit()

    f = open(outfile, 'w+')

    for setup in setups:

      # Get schedules generated by scheduler
      writer = csv.writer(f)

      row = run_scheduler(args, setup, setup.uuid, args.scheduler_type)

      writer.writerow(row)
      f.flush()

    f.close()


if __name__ == "__main__":
    main()
